directive @export(as: String!) on FIELD

directive @required on FIELD_DEFINITION

directive @key(fields: [String!]!) on OBJECT | INPUT_OBJECT

directive @distinct on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @noloops on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @requiredForTarget on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @uniqueForTarget on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @_requiredForTarget_AccordingToInterface(interface: String!) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @_uniqueForTarget_AccordingToInterface(interface: String!) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

interface Character {
  name: String
  friends(filter: _FilterForCharacter): [Character]
  homeWorld: Planet
  species: Species
  id: ID!
  _friendsFromCharacter(filter: _FilterForCharacter): [Character]
  _friendsFromHuman(filter: _FilterForHuman): [Human]
  _friendsFromDroid(filter: _FilterForDroid): [Droid]
  _outgoingFriendsEdgesFromCharacter(filter: _FilterForFriendsEdgeFromCharacter): [_FriendsEdgeFromCharacter]
  _outgoingHomeWorldEdgesFromCharacter: _HomeWorldEdgeFromCharacter
  _outgoingSpeciesEdgesFromCharacter: _SpeciesEdgeFromCharacter
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

scalar DateTime

type Droid implements Character {
  name: String!
  friends(filter: _FilterForCharacter): [Character]
  homeWorld: Planet
  species: Species
  appearsIn: [Episode]!
  primaryFunction: String
  id: ID!
  _friendsFromCharacter(filter: _FilterForCharacter): [Character]
  _friendsFromHuman(filter: _FilterForHuman): [Human]
  _friendsFromDroid(filter: _FilterForDroid): [Droid]
  _outgoingFriendsEdgesFromCharacter(filter: _FilterForFriendsEdgeFromCharacter): [_FriendsEdgeFromCharacter]
  _incomingFriendsEdgeFromCharacter(filter: _FilterForFriendsEdgeFromCharacter): [_FriendsEdgeFromCharacter]
  _outgoingHomeWorldEdgesFromCharacter: _HomeWorldEdgeFromCharacter
  _outgoingSpeciesEdgesFromCharacter: _SpeciesEdgeFromCharacter
  _incomingFriendsEdgeFromHuman(filter: _FilterForFriendsEdgeFromHuman): [_FriendsEdgeFromHuman]
  _outgoingFriendsEdgesFromDroid(filter: _FilterForFriendsEdgeFromDroid): [_FriendsEdgeFromDroid]
  _incomingFriendsEdgeFromDroid(filter: _FilterForFriendsEdgeFromDroid): [_FriendsEdgeFromDroid]
  _outgoingHomeWorldEdgesFromDroid: _HomeWorldEdgeFromDroid
  _outgoingSpeciesEdgesFromDroid: _SpeciesEdgeFromDroid
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

enum Episode {
  NEWHOPE
  EMPIRE
  JEDI
}

type Human implements Character @key(fields:["name"]) {
  name: String!
  friends(filter: _FilterForCharacter): [Character]
  homeWorld: Planet
  species: Species
  appearsIn: [Episode]!
  starships(filter: _FilterForStarship): [Starship]
  totalCredits: Int
  id: ID!
  _friendsFromCharacter(filter: _FilterForCharacter): [Character]
  _friendsFromHuman(filter: _FilterForHuman): [Human]
  _friendsFromDroid(filter: _FilterForDroid): [Droid]
  _outgoingFriendsEdgesFromCharacter(filter: _FilterForFriendsEdgeFromCharacter): [_FriendsEdgeFromCharacter]
  _incomingFriendsEdgeFromCharacter(filter: _FilterForFriendsEdgeFromCharacter): [_FriendsEdgeFromCharacter]
  _outgoingHomeWorldEdgesFromCharacter: _HomeWorldEdgeFromCharacter
  _outgoingSpeciesEdgesFromCharacter: _SpeciesEdgeFromCharacter
  _outgoingFriendsEdgesFromHuman(filter: _FilterForFriendsEdgeFromHuman): [_FriendsEdgeFromHuman]
  _incomingFriendsEdgeFromHuman(filter: _FilterForFriendsEdgeFromHuman): [_FriendsEdgeFromHuman]
  _outgoingHomeWorldEdgesFromHuman: _HomeWorldEdgeFromHuman
  _outgoingSpeciesEdgesFromHuman: _SpeciesEdgeFromHuman
  _outgoingStarshipsEdgesFromHuman(filter: _FilterForStarshipsEdgeFromHuman): [_StarshipsEdgeFromHuman]
  _incomingFriendsEdgeFromDroid(filter: _FilterForFriendsEdgeFromDroid): [_FriendsEdgeFromDroid]
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type Mutation {
  createHuman(data: _InputToCreateHuman!): Human
  createDroid(data: _InputToCreateDroid!): Droid
  createPlanet(data: _InputToCreatePlanet!): Planet
  createSpecies(data: _InputToCreateSpecies!): Species
  createStarship(data: _InputToCreateStarship!): Starship
  updateHuman(id: ID!, data: _InputToUpdateHuman!): Human
  updateDroid(id: ID!, data: _InputToUpdateDroid!): Droid
  updatePlanet(id: ID!, data: _InputToUpdatePlanet!): Planet
  updateSpecies(id: ID!, data: _InputToUpdateSpecies!): Species
  updateStarship(id: ID!, data: _InputToUpdateStarship!): Starship
  deleteCharacter(id: ID!): Character
  deleteHuman(id: ID!): Human
  deleteDroid(id: ID!): Droid
  deletePlanet(id: ID!): Planet
  deleteSpecies(id: ID!): Species
  deleteStarship(id: ID!): Starship
  createFriendsEdgeFromHuman(data: _InputToCreateFriendsEdgeFromHuman): _FriendsEdgeFromHuman
  createHomeWorldEdgeFromHuman(data: _InputToCreateHomeWorldEdgeFromHuman): _HomeWorldEdgeFromHuman
  createSpeciesEdgeFromHuman(data: _InputToCreateSpeciesEdgeFromHuman): _SpeciesEdgeFromHuman
  createStarshipsEdgeFromHuman(data: _InputToCreateStarshipsEdgeFromHuman): _StarshipsEdgeFromHuman
  createFriendsEdgeFromDroid(data: _InputToCreateFriendsEdgeFromDroid): _FriendsEdgeFromDroid
  createHomeWorldEdgeFromDroid(data: _InputToCreateHomeWorldEdgeFromDroid): _HomeWorldEdgeFromDroid
  createSpeciesEdgeFromDroid(data: _InputToCreateSpeciesEdgeFromDroid): _SpeciesEdgeFromDroid
  createOriginEdgeFromSpecies(data: _InputToCreateOriginEdgeFromSpecies): _OriginEdgeFromSpecies
  createStyleEdgeFromStarship(data: _InputToCreateStyleEdgeFromStarship): _StyleEdgeFromStarship
  deleteFriendsEdgeFromHuman(id: ID!): _FriendsEdgeFromHuman
  deleteHomeWorldEdgeFromHuman(id: ID!): _HomeWorldEdgeFromHuman
  deleteSpeciesEdgeFromHuman(id: ID!): _SpeciesEdgeFromHuman
  deleteStarshipsEdgeFromHuman(id: ID!): _StarshipsEdgeFromHuman
  deleteFriendsEdgeFromDroid(id: ID!): _FriendsEdgeFromDroid
  deleteHomeWorldEdgeFromDroid(id: ID!): _HomeWorldEdgeFromDroid
  deleteSpeciesEdgeFromDroid(id: ID!): _SpeciesEdgeFromDroid
  deleteOriginEdgeFromSpecies(id: ID!): _OriginEdgeFromSpecies
  deleteStyleEdgeFromStarship(id: ID!): _StyleEdgeFromStarship
}

type Planet @key(fields:["name"]) {
  name: String!
  climate: String
  id: ID!
  _homeWorldFromCharacter(filter: _FilterForCharacter): [Character]
  _homeWorldFromHuman(filter: _FilterForHuman): [Human]
  _homeWorldFromDroid(filter: _FilterForDroid): [Droid]
  _originFromSpecies(filter: _FilterForSpecies): [Species]
  _styleFromStarship(filter: _FilterForStarship): [Starship]
  _incomingHomeWorldEdgeFromCharacter(filter: _FilterForHomeWorldEdgeFromCharacter): [_HomeWorldEdgeFromCharacter]
  _incomingHomeWorldEdgeFromHuman(filter: _FilterForHomeWorldEdgeFromHuman): [_HomeWorldEdgeFromHuman]
  _incomingHomeWorldEdgeFromDroid(filter: _FilterForHomeWorldEdgeFromDroid): [_HomeWorldEdgeFromDroid]
  _incomingOriginEdgeFromSpecies(filter: _FilterForOriginEdgeFromSpecies): [_OriginEdgeFromSpecies]
  _incomingStyleEdgeFromStarship(filter: _FilterForStyleEdgeFromStarship): [_StyleEdgeFromStarship]
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

union PlanetAndSpecies = Planet | Species

type Query {
  planetAndSpecies(id: ID!): PlanetAndSpecies
  character(id: ID!): Character
  human(id: ID!): Human
  droid(id: ID!): Droid
  planet(id: ID!): Planet
  species(id: ID!): Species
  starship(id: ID!): Starship
  listOfCharacters(first: Int=10, after: ID="", filter: _FilterForCharacter): _ListOfCharacters
  listOfHumans(first: Int=10, after: ID="", filter: _FilterForHuman): _ListOfHumans
  listOfDroids(first: Int=10, after: ID="", filter: _FilterForDroid): _ListOfDroids
  listOfPlanets(first: Int=10, after: ID="", filter: _FilterForPlanet): _ListOfPlanets
  listOfSpeciess(first: Int=10, after: ID="", filter: _FilterForSpecies): _ListOfSpeciess
  listOfStarships(first: Int=10, after: ID="", filter: _FilterForStarship): _ListOfStarships
  humanByKey(key: _KeyForHuman!): Human
  planetByKey(key: _KeyForPlanet!): Planet
  _FriendsEdgeFromCharacter(id: ID!): _FriendsEdgeFromCharacter
  _HomeWorldEdgeFromCharacter(id: ID!): _HomeWorldEdgeFromCharacter
  _SpeciesEdgeFromCharacter(id: ID!): _SpeciesEdgeFromCharacter
  _FriendsEdgeFromHuman(id: ID!): _FriendsEdgeFromHuman
  _HomeWorldEdgeFromHuman(id: ID!): _HomeWorldEdgeFromHuman
  _SpeciesEdgeFromHuman(id: ID!): _SpeciesEdgeFromHuman
  _StarshipsEdgeFromHuman(id: ID!): _StarshipsEdgeFromHuman
  _FriendsEdgeFromDroid(id: ID!): _FriendsEdgeFromDroid
  _HomeWorldEdgeFromDroid(id: ID!): _HomeWorldEdgeFromDroid
  _SpeciesEdgeFromDroid(id: ID!): _SpeciesEdgeFromDroid
  _OriginEdgeFromSpecies(id: ID!): _OriginEdgeFromSpecies
  _StyleEdgeFromStarship(id: ID!): _StyleEdgeFromStarship
}

type Species {
  name: String
  lifespan: Int
  origin: Planet
  id: ID!
  _speciesFromCharacter(filter: _FilterForCharacter): [Character]
  _speciesFromHuman(filter: _FilterForHuman): [Human]
  _speciesFromDroid(filter: _FilterForDroid): [Droid]
  _styleFromStarship(filter: _FilterForStarship): [Starship]
  _incomingSpeciesEdgeFromCharacter(filter: _FilterForSpeciesEdgeFromCharacter): [_SpeciesEdgeFromCharacter]
  _incomingSpeciesEdgeFromHuman(filter: _FilterForSpeciesEdgeFromHuman): [_SpeciesEdgeFromHuman]
  _incomingSpeciesEdgeFromDroid(filter: _FilterForSpeciesEdgeFromDroid): [_SpeciesEdgeFromDroid]
  _outgoingOriginEdgesFromSpecies: _OriginEdgeFromSpecies
  _incomingStyleEdgeFromStarship(filter: _FilterForStyleEdgeFromStarship): [_StyleEdgeFromStarship]
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type Starship {
  name: String!
  length: Float
  style: PlanetAndSpecies
  id: ID!
  _starshipsFromHuman(filter: _FilterForHuman): [Human]
  _incomingStarshipsEdgeFromHuman(filter: _FilterForStarshipsEdgeFromHuman): [_StarshipsEdgeFromHuman]
  _outgoingStyleEdgesFromStarship: _StyleEdgeFromStarship
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

input _BooleanFilter {
  _eq: Boolean
  _neq: Boolean
}

input _DateTimeFilter {
  _eq: DateTime
  _neq: DateTime
  _in: [DateTime]
  _nin: [DateTime]
  _gt: DateTime
  _egt: DateTime
  _lt: DateTime
  _elt: DateTime
}

input _EpisodeFilter {
  _eq: Episode
  _neq: Episode
  _in: [Episode]
  _nin: [Episode]
}

input _FilterForCharacter {
  _and: [_FilterForCharacter]
  _or: [_FilterForCharacter]
  _not: _FilterForCharacter
  name: _StringFilter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForDroid {
  _and: [_FilterForDroid]
  _or: [_FilterForDroid]
  _not: _FilterForDroid
  name: _StringFilter
  primaryFunction: _StringFilter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForFriendsEdgeFromCharacter {
  _and: [_FilterForFriendsEdgeFromCharacter]
  _or: [_FilterForFriendsEdgeFromCharacter]
  _not: _FilterForFriendsEdgeFromCharacter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForFriendsEdgeFromDroid {
  _and: [_FilterForFriendsEdgeFromDroid]
  _or: [_FilterForFriendsEdgeFromDroid]
  _not: _FilterForFriendsEdgeFromDroid
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForFriendsEdgeFromHuman {
  _and: [_FilterForFriendsEdgeFromHuman]
  _or: [_FilterForFriendsEdgeFromHuman]
  _not: _FilterForFriendsEdgeFromHuman
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForHomeWorldEdgeFromCharacter {
  _and: [_FilterForHomeWorldEdgeFromCharacter]
  _or: [_FilterForHomeWorldEdgeFromCharacter]
  _not: _FilterForHomeWorldEdgeFromCharacter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForHomeWorldEdgeFromDroid {
  _and: [_FilterForHomeWorldEdgeFromDroid]
  _or: [_FilterForHomeWorldEdgeFromDroid]
  _not: _FilterForHomeWorldEdgeFromDroid
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForHomeWorldEdgeFromHuman {
  _and: [_FilterForHomeWorldEdgeFromHuman]
  _or: [_FilterForHomeWorldEdgeFromHuman]
  _not: _FilterForHomeWorldEdgeFromHuman
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForHuman {
  _and: [_FilterForHuman]
  _or: [_FilterForHuman]
  _not: _FilterForHuman
  name: _StringFilter
  totalCredits: _IntFilter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForOriginEdgeFromSpecies {
  _and: [_FilterForOriginEdgeFromSpecies]
  _or: [_FilterForOriginEdgeFromSpecies]
  _not: _FilterForOriginEdgeFromSpecies
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForPlanet {
  _and: [_FilterForPlanet]
  _or: [_FilterForPlanet]
  _not: _FilterForPlanet
  name: _StringFilter
  climate: _StringFilter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForSpecies {
  _and: [_FilterForSpecies]
  _or: [_FilterForSpecies]
  _not: _FilterForSpecies
  name: _StringFilter
  lifespan: _IntFilter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForSpeciesEdgeFromCharacter {
  _and: [_FilterForSpeciesEdgeFromCharacter]
  _or: [_FilterForSpeciesEdgeFromCharacter]
  _not: _FilterForSpeciesEdgeFromCharacter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForSpeciesEdgeFromDroid {
  _and: [_FilterForSpeciesEdgeFromDroid]
  _or: [_FilterForSpeciesEdgeFromDroid]
  _not: _FilterForSpeciesEdgeFromDroid
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForSpeciesEdgeFromHuman {
  _and: [_FilterForSpeciesEdgeFromHuman]
  _or: [_FilterForSpeciesEdgeFromHuman]
  _not: _FilterForSpeciesEdgeFromHuman
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForStarship {
  _and: [_FilterForStarship]
  _or: [_FilterForStarship]
  _not: _FilterForStarship
  name: _StringFilter
  length: _FloatFilter
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForStarshipsEdgeFromHuman {
  _and: [_FilterForStarshipsEdgeFromHuman]
  _or: [_FilterForStarshipsEdgeFromHuman]
  _not: _FilterForStarshipsEdgeFromHuman
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FilterForStyleEdgeFromStarship {
  _and: [_FilterForStyleEdgeFromStarship]
  _or: [_FilterForStyleEdgeFromStarship]
  _not: _FilterForStyleEdgeFromStarship
  id: _IDFilter
  _creationDate: _DateTimeFilter
  _lastUpdateDate: _DateTimeFilter
}

input _FloatFilter {
  _eq: Float
  _neq: Float
  _gt: Float
  _egt: Float
  _lt: Float
  _elt: Float
  _in: [Float]
  _nin: [Float]
}

interface _FriendsEdgeFromCharacter {
  id: ID!
  source: Character!
  target: Character!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type _FriendsEdgeFromDroid implements _FriendsEdgeFromCharacter {
  id: ID!
  source: Droid!
  target: Character!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type _FriendsEdgeFromHuman implements _FriendsEdgeFromCharacter {
  id: ID!
  source: Human!
  target: Character!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

interface _HomeWorldEdgeFromCharacter {
  id: ID!
  source: Character!
  target: Planet!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type _HomeWorldEdgeFromDroid implements _HomeWorldEdgeFromCharacter {
  id: ID!
  source: Droid!
  target: Planet!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type _HomeWorldEdgeFromHuman implements _HomeWorldEdgeFromCharacter {
  id: ID!
  source: Human!
  target: Planet!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

input _IDFilter {
  _eq: String
  _neq: String
  _gt: String
  _egt: String
  _lt: String
  _elt: String
  _in: [String]
  _nin: [String]
  _like: String
  _ilike: String
  _nlike: String
  _nilike: String
}

input _InputToConnectFriendsOfDroid {
  connect: ID
  createHuman: _InputToCreateHuman
  createDroid: _InputToCreateDroid
}

input _InputToConnectFriendsOfHuman {
  connect: ID
  createHuman: _InputToCreateHuman
  createDroid: _InputToCreateDroid
}

input _InputToConnectHomeWorldOfDroid {
  connect: ID
  create: _InputToCreatePlanet
}

input _InputToConnectHomeWorldOfHuman {
  connect: ID
  create: _InputToCreatePlanet
}

input _InputToConnectOriginOfSpecies {
  connect: ID
  create: _InputToCreatePlanet
}

input _InputToConnectSpeciesOfDroid {
  connect: ID
  create: _InputToCreateSpecies
}

input _InputToConnectSpeciesOfHuman {
  connect: ID
  create: _InputToCreateSpecies
}

input _InputToConnectStarshipsOfHuman {
  connect: ID
  create: _InputToCreateStarship
}

input _InputToConnectStyleOfStarship {
  connect: ID
  createPlanet: _InputToCreatePlanet
  createSpecies: _InputToCreateSpecies
}

input _InputToCreateDroid {
  name: String!
  friends: [_InputToConnectFriendsOfDroid]
  homeWorld: _InputToConnectHomeWorldOfDroid
  species: _InputToConnectSpeciesOfDroid
  appearsIn: [Episode]!
  primaryFunction: String
}

input _InputToCreateFriendsEdgeFromDroid {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreateFriendsEdgeFromHuman {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreateHomeWorldEdgeFromDroid {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreateHomeWorldEdgeFromHuman {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreateHuman @key(fields:["name"]) {
  name: String!
  friends: [_InputToConnectFriendsOfHuman]
  homeWorld: _InputToConnectHomeWorldOfHuman
  species: _InputToConnectSpeciesOfHuman
  appearsIn: [Episode]!
  starships: [_InputToConnectStarshipsOfHuman]
  totalCredits: Int
}

input _InputToCreateOriginEdgeFromSpecies {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreatePlanet @key(fields:["name"]) {
  name: String!
  climate: String
}

input _InputToCreateSpecies {
  name: String
  lifespan: Int
  origin: _InputToConnectOriginOfSpecies
}

input _InputToCreateSpeciesEdgeFromDroid {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreateSpeciesEdgeFromHuman {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreateStarship {
  name: String!
  length: Float
  style: _InputToConnectStyleOfStarship
}

input _InputToCreateStarshipsEdgeFromHuman {
  sourceID: ID!
  targetID: ID!
}

input _InputToCreateStyleEdgeFromStarship {
  sourceID: ID!
  targetID: ID!
}

input _InputToUpdateDroid {
  name: String
  friends: [_InputToConnectFriendsOfDroid]
  homeWorld: _InputToConnectHomeWorldOfDroid
  species: _InputToConnectSpeciesOfDroid
  appearsIn: [Episode]
  primaryFunction: String
}

input _InputToUpdateHuman @key(fields:["name"]) {
  name: String
  friends: [_InputToConnectFriendsOfHuman]
  homeWorld: _InputToConnectHomeWorldOfHuman
  species: _InputToConnectSpeciesOfHuman
  appearsIn: [Episode]
  starships: [_InputToConnectStarshipsOfHuman]
  totalCredits: Int
}

input _InputToUpdatePlanet @key(fields:["name"]) {
  name: String
  climate: String
}

input _InputToUpdateSpecies {
  name: String
  lifespan: Int
  origin: _InputToConnectOriginOfSpecies
}

input _InputToUpdateStarship {
  name: String
  length: Float
  style: _InputToConnectStyleOfStarship
}

input _IntFilter {
  _eq: Int
  _neq: Int
  _gt: Int
  _egt: Int
  _lt: Int
  _elt: Int
  _in: [Int]
  _nin: [Int]
}

input _KeyForHuman {
  name: String!
}

input _KeyForPlanet {
  name: String!
}

type _ListOfCharacters {
  totalCount: Int!
  isEndOfWholeList: Boolean!
  content: [Character]!
}

type _ListOfDroids {
  totalCount: Int!
  isEndOfWholeList: Boolean!
  content: [Droid]!
}

type _ListOfHumans {
  totalCount: Int!
  isEndOfWholeList: Boolean!
  content: [Human]!
}

type _ListOfPlanets {
  totalCount: Int!
  isEndOfWholeList: Boolean!
  content: [Planet]!
}

type _ListOfSpeciess {
  totalCount: Int!
  isEndOfWholeList: Boolean!
  content: [Species]!
}

type _ListOfStarships {
  totalCount: Int!
  isEndOfWholeList: Boolean!
  content: [Starship]!
}

type _OriginEdgeFromSpecies {
  id: ID!
  source: Species!
  target: Planet!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

interface _SpeciesEdgeFromCharacter {
  id: ID!
  source: Character!
  target: Species!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type _SpeciesEdgeFromDroid implements _SpeciesEdgeFromCharacter {
  id: ID!
  source: Droid!
  target: Species!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type _SpeciesEdgeFromHuman implements _SpeciesEdgeFromCharacter {
  id: ID!
  source: Human!
  target: Species!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

type _StarshipsEdgeFromHuman {
  id: ID!
  source: Human!
  target: Starship!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

input _StringFilter {
  _eq: String
  _neq: String
  _gt: String
  _egt: String
  _lt: String
  _elt: String
  _in: [String]
  _nin: [String]
  _like: String
  _ilike: String
  _nlike: String
  _nilike: String
}

type _StyleEdgeFromStarship {
  id: ID!
  source: Starship!
  target: PlanetAndSpecies!
  _creationDate: DateTime!
  _lastUpdateDate: DateTime
}

